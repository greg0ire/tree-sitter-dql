// This file was autogenerated by parse_grammar.lua from dql.ebnf.

/*
 * inline constants: 
 */

module.exports = grammar({
  name: 'dql',

  /*
   * dql.ebnf:3
   * word ::= identifier
   */
  word: $ => $.identifier
             ,

  conflicts: $ => [
    [$.IdentificationVariable, $.ResultVariable],
    [$.Literal, $.StringPrimary],
    [$.SelectExpression, $.ArithmeticPrimary],
    [$.SingleValuedPathExpression, $.ScalarExpression, $.StringPrimary, $.BooleanPrimary, $.DatetimePrimary],
    [$.ArithmeticPrimary, $.StringPrimary, $.BooleanPrimary, $.DatetimePrimary],
    [$.SelectExpression, $.ArithmeticPrimary, $.StringPrimary, $.DatetimePrimary],
    [$.SelectExpression, $.ArithmeticPrimary, $.ScalarExpression, $.StringPrimary],
    [$.ArithmeticPrimary, $.FunctionDeclaration],
    [$.ArithmeticPrimary, $.DatetimePrimary, $.FunctionDeclaration],
    [$.ArithmeticPrimary, $.StringPrimary, $.FunctionDeclaration],
    [$.Literal, $.BooleanPrimary],
    [$.ArithmeticPrimary, $.SimpleEntityExpression, $.InstanceOfExpression],
    [$.ArithmeticPrimary, $.StringExpression],
    [$.SingleValuedPathExpression, $.StringPrimary],
    [$.SingleValuedPathExpression, $.EntityExpression],
    [$.ArithmeticPrimary, $.StringPrimary, $.SimpleEntityExpression],
    [$.ArithmeticPrimary, $.StringPrimary],
    [$.SimpleSelectExpression, $.ArithmeticPrimary],
    [$.SingleValuedPathExpression, $.SimpleSelectExpression, $.ScalarExpression, $.StringPrimary, $.BooleanPrimary, $.DatetimePrimary],
    [$.SimpleSelectExpression, $.ArithmeticPrimary, $.StringPrimary, $.DatetimePrimary],
    [$.ArithmeticPrimary, $.ScalarExpression, $.StringPrimary],
    [$.ArithmeticPrimary, $.StringPrimary, $.DatetimePrimary],
    [$.ArithmeticPrimary, $.DatetimePrimary],
    [$.SingleValuedAssociationField, $.SimpleStateField],
    [$.EntityAsDtoArgumentExpression, $.ArithmeticPrimary],
    [$.OrderByItem, $.ArithmeticPrimary],
    [$.OrderByItem, $.ScalarExpression],
    [$.ArithmeticExpression, $.StringExpression],
    [$.CollectionValuedAssociationField, $.SingleValuedAssociationField, $.SimpleStateField],
    [$.InParameter, $.ArithmeticPrimary],
    [$.CollectionValuedAssociationField, $.SingleValuedAssociationField],
    [$.ExistsExpression]
  ],

  rules: {
    /*
     * dql.ebnf:7
     * QueryLanguage ::= SelectStatement | UpdateStatement | DeleteStatement
     */
    QueryLanguage: $ => choice($.SelectStatement, $.UpdateStatement, $.DeleteStatement)
                        ,
    /*
     * dql.ebnf:10
     * SelectStatement ::= SelectClause FromClause WhereClause? GroupByClause? HavingClause? OrderByClause?
     */
    SelectStatement: $ => seq(
                          
                            $.SelectClause,
                          
                            $.FromClause,
                          
                            optional($.WhereClause),
                          
                            optional($.GroupByClause),
                          
                            optional($.HavingClause),
                          
                            optional($.OrderByClause)
                          
                          )
                          ,
    /*
     * dql.ebnf:11
     * UpdateStatement ::= UpdateClause WhereClause?
     */
    UpdateStatement: $ => seq($.UpdateClause, optional($.WhereClause))
                          ,
    /*
     * dql.ebnf:12
     * DeleteStatement ::= DeleteClause WhereClause?
     */
    DeleteStatement: $ => seq($.DeleteClause, optional($.WhereClause))
                          ,
    /*
     * dql.ebnf:16
     * IdentificationVariable ::= identifier
     */
    IdentificationVariable: $ => $.identifier
                                 ,
    /*
     * dql.ebnf:19
     * AliasIdentificationVariable ::= identifier
     */
    AliasIdentificationVariable: $ => $.identifier
                                      ,
    /*
     * dql.ebnf:22
     * AbstractSchemaName ::= fully_qualified_name | identifier
     */
    AbstractSchemaName: $ => choice($.fully_qualified_name, $.identifier)
                             ,
    /*
     * dql.ebnf:25
     * AliasResultVariable ::= identifier
     */
    AliasResultVariable: $ => $.identifier
                              ,
    /*
     * dql.ebnf:28
     * ResultVariable ::= identifier
     */
    ResultVariable: $ => $.identifier
                         ,
    /*
     * dql.ebnf:32
     * FieldIdentificationVariable ::= identifier
     */
    FieldIdentificationVariable: $ => $.identifier
                                      ,
    /*
     * dql.ebnf:35
     * CollectionValuedAssociationField ::= FieldIdentificationVariable
     */
    CollectionValuedAssociationField: $ => $.FieldIdentificationVariable
                                           ,
    /*
     * dql.ebnf:38
     * SingleValuedAssociationField ::= FieldIdentificationVariable
     */
    SingleValuedAssociationField: $ => $.FieldIdentificationVariable
                                       ,
    /*
     * dql.ebnf:41
     * EmbeddedClassStateField ::= FieldIdentificationVariable
     */
    EmbeddedClassStateField: $ => $.FieldIdentificationVariable
                                  ,
    /*
     * dql.ebnf:45
     * SimpleStateField ::= FieldIdentificationVariable
     */
    SimpleStateField: $ => $.FieldIdentificationVariable
                           ,
    /*
     * dql.ebnf:49
     * JoinAssociationPathExpression ::= IdentificationVariable "." (CollectionValuedAssociationField | SingleValuedAssociationField)
     */
    JoinAssociationPathExpression: $ => seq(
                                        
                                          $.IdentificationVariable,
                                        
                                          ".",
                                        
                                          choice($.CollectionValuedAssociationField, $.SingleValuedAssociationField)
                                        
                                        )
                                        ,
    /*
     * dql.ebnf:52
     * AssociationPathExpression ::= CollectionValuedPathExpression | SingleValuedAssociationPathExpression
     */
    AssociationPathExpression: $ => choice($.CollectionValuedPathExpression, $.SingleValuedAssociationPathExpression)
                                    ,
    /*
     * dql.ebnf:55
     * SingleValuedPathExpression ::= StateFieldPathExpression | SingleValuedAssociationPathExpression
     */
    SingleValuedPathExpression: $ => choice($.StateFieldPathExpression, $.SingleValuedAssociationPathExpression)
                                     ,
    /*
     * dql.ebnf:58
     * StateFieldPathExpression ::= IdentificationVariable "." StateField
     */
    StateFieldPathExpression: $ => seq($.IdentificationVariable, ".", $.StateField)
                                   ,
    /*
     * dql.ebnf:61
     * SingleValuedAssociationPathExpression ::= IdentificationVariable "." SingleValuedAssociationField
     */
    SingleValuedAssociationPathExpression: $ => seq($.IdentificationVariable, ".", $.SingleValuedAssociationField)
                                                ,
    /*
     * dql.ebnf:64
     * CollectionValuedPathExpression ::= IdentificationVariable "." CollectionValuedAssociationField
     */
    CollectionValuedPathExpression: $ => seq($.IdentificationVariable, ".", $.CollectionValuedAssociationField)
                                         ,
    /*
     * dql.ebnf:67
     * StateField ::= (EmbeddedClassStateField ".")* SimpleStateField
     */
    StateField: $ => seq(repeat(seq($.EmbeddedClassStateField, ".")), $.SimpleStateField)
                     ,
    /*
     * dql.ebnf:70
     * SelectClause ::= "SELECT" "DISTINCT"? SelectExpression ("," SelectExpression)*
     */
    SelectClause: $ => seq(
                       
                         "SELECT",
                       
                         optional("DISTINCT"),
                       
                         $.SelectExpression,
                       
                         repeat(seq(",", $.SelectExpression))
                       
                       )
                       ,
    /*
     * dql.ebnf:71
     * SimpleSelectClause ::= "SELECT" "DISTINCT"? SimpleSelectExpression
     */
    SimpleSelectClause: $ => seq("SELECT", optional("DISTINCT"), $.SimpleSelectExpression)
                             ,
    /*
     * dql.ebnf:72
     * UpdateClause ::= "UPDATE" AbstractSchemaName ("AS")? AliasIdentificationVariable "SET" UpdateItem ("," UpdateItem)*
     */
    UpdateClause: $ => seq(
                       
                         "UPDATE",
                       
                         $.AbstractSchemaName,
                       
                         optional("AS"),
                       
                         $.AliasIdentificationVariable,
                       
                         "SET",
                       
                         $.UpdateItem,
                       
                         repeat(seq(",", $.UpdateItem))
                       
                       )
                       ,
    /*
     * dql.ebnf:73
     * DeleteClause ::= "DELETE" ("FROM")? AbstractSchemaName ("AS")? AliasIdentificationVariable
     */
    DeleteClause: $ => seq(
                       
                         "DELETE",
                       
                         optional("FROM"),
                       
                         $.AbstractSchemaName,
                       
                         optional("AS"),
                       
                         $.AliasIdentificationVariable
                       
                       )
                       ,
    /*
     * dql.ebnf:74
     * FromClause ::= "FROM" IdentificationVariableDeclaration ("," IdentificationVariableDeclaration)*
     */
    FromClause: $ => seq(
                     
                       "FROM",
                     
                       $.IdentificationVariableDeclaration,
                     
                       repeat(seq(",", $.IdentificationVariableDeclaration))
                     
                     )
                     ,
    /*
     * dql.ebnf:75
     * SubselectFromClause ::= "FROM" SubselectIdentificationVariableDeclaration ("," SubselectIdentificationVariableDeclaration)*
     */
    SubselectFromClause: $ => seq(
                              
                                "FROM",
                              
                                $.SubselectIdentificationVariableDeclaration,
                              
                                repeat(seq(",", $.SubselectIdentificationVariableDeclaration))
                              
                              )
                              ,
    /*
     * dql.ebnf:76
     * WhereClause ::= "WHERE" ConditionalExpression
     */
    WhereClause: $ => seq("WHERE", $.ConditionalExpression)
                      ,
    /*
     * dql.ebnf:77
     * HavingClause ::= "HAVING" ConditionalExpression
     */
    HavingClause: $ => seq("HAVING", $.ConditionalExpression)
                       ,
    /*
     * dql.ebnf:78
     * GroupByClause ::= "GROUP" "BY" GroupByItem ("," GroupByItem)*
     */
    GroupByClause: $ => seq("GROUP", "BY", $.GroupByItem, repeat(seq(",", $.GroupByItem)))
                        ,
    /*
     * dql.ebnf:79
     * OrderByClause ::= "ORDER" "BY" OrderByItem ("," OrderByItem)*
     */
    OrderByClause: $ => seq("ORDER", "BY", $.OrderByItem, repeat(seq(",", $.OrderByItem)))
                        ,
    /*
     * dql.ebnf:80
     * Subselect ::= SimpleSelectClause SubselectFromClause WhereClause? GroupByClause? HavingClause? OrderByClause?
     */
    Subselect: $ => seq(
                    
                      $.SimpleSelectClause,
                    
                      $.SubselectFromClause,
                    
                      optional($.WhereClause),
                    
                      optional($.GroupByClause),
                    
                      optional($.HavingClause),
                    
                      optional($.OrderByClause)
                    
                    )
                    ,
    /*
     * dql.ebnf:83
     * UpdateItem ::= SingleValuedPathExpression "=" NewValue
     */
    UpdateItem: $ => seq($.SingleValuedPathExpression, "=", $.NewValue)
                     ,
    /*
     * dql.ebnf:84
     * OrderByItem ::= (SimpleArithmeticExpression | SingleValuedPathExpression | ScalarExpression | ResultVariable | FunctionDeclaration) ("ASC" | "DESC")?
     */
    OrderByItem: $ => seq(
                      
                        choice(
                      
                          $.SimpleArithmeticExpression,
                      
                          $.SingleValuedPathExpression,
                      
                          $.ScalarExpression,
                      
                          $.ResultVariable,
                      
                          $.FunctionDeclaration
                      
                        ),
                      
                        optional(choice("ASC", "DESC"))
                      
                      )
                      ,
    /*
     * dql.ebnf:85
     * GroupByItem ::= IdentificationVariable | ResultVariable | SingleValuedPathExpression
     */
    GroupByItem: $ => choice($.IdentificationVariable, $.ResultVariable, $.SingleValuedPathExpression)
                      ,
    /*
     * dql.ebnf:86
     * NewValue ::= SimpleArithmeticExpression | "NULL"
     */
    NewValue: $ => choice($.SimpleArithmeticExpression, "NULL")
                   ,
    /*
     * dql.ebnf:89
     * IdentificationVariableDeclaration ::= RangeVariableDeclaration IndexBy? Join*
     */
    IdentificationVariableDeclaration: $ => seq($.RangeVariableDeclaration, optional($.IndexBy), repeat($.Join))
                                            ,
    /*
     * dql.ebnf:90
     * SubselectIdentificationVariableDeclaration ::= IdentificationVariableDeclaration
     */
    SubselectIdentificationVariableDeclaration: $ => $.IdentificationVariableDeclaration
                                                     ,
    /*
     * dql.ebnf:91
     * RangeVariableDeclaration ::= AbstractSchemaName ("AS")? AliasIdentificationVariable
     */
    RangeVariableDeclaration: $ => seq($.AbstractSchemaName, optional("AS"), $.AliasIdentificationVariable)
                                   ,
    /*
     * dql.ebnf:92
     * JoinAssociationDeclaration ::= JoinAssociationPathExpression ("AS")? AliasIdentificationVariable IndexBy?
     */
    JoinAssociationDeclaration: $ => seq(
                                     
                                       $.JoinAssociationPathExpression,
                                     
                                       optional("AS"),
                                     
                                       $.AliasIdentificationVariable,
                                     
                                       optional($.IndexBy)
                                     
                                     )
                                     ,
    /*
     * dql.ebnf:93
     * Join ::= ("LEFT" ("OUTER")? | "INNER")? "JOIN" (JoinAssociationDeclaration | RangeVariableDeclaration) ("WITH" ConditionalExpression)?
     */
    Join: $ => seq(
                
                  optional(choice(seq("LEFT", optional("OUTER")), "INNER")),
                
                  "JOIN",
                
                  choice(
                    seq($.JoinAssociationDeclaration, optional(seq("WITH", $.ConditionalExpression))),
                    seq($.RangeVariableDeclaration, optional(seq(choice("WITH", "ON"), $.ConditionalExpression)))
                  )
                
                )
               ,
    /*
     * dql.ebnf:94
     * IndexBy ::= "INDEX" "BY" SingleValuedPathExpression
     */
    IndexBy: $ => seq("INDEX", "BY", $.SingleValuedPathExpression)
                  ,
    /*
     * dql.ebnf:97
     * SelectExpression ::= (IdentificationVariable | ScalarExpression | AggregateExpression | FunctionDeclaration | PartialObjectExpression | "(" Subselect ")" | CaseExpression | NewObjectExpression) (("AS")? ("HIDDEN")? AliasResultVariable)?
     */
    SelectExpression: $ => seq(
                           
                             choice(
                           
                               $.IdentificationVariable,
                           
                               $.ScalarExpression,
                           
                               $.AggregateExpression,
                           
                               $.FunctionDeclaration,
                           
                               $.PartialObjectExpression,
                           
                               seq("(", $.Subselect, ")"),
                           
                               $.CaseExpression,
                           
                               $.NewObjectExpression
                           
                             ),
                           
                             optional(seq(optional("AS"), optional("HIDDEN"), $.AliasResultVariable))
                           
                           )
                           ,
    /*
     * dql.ebnf:98
     * SimpleSelectExpression ::= (StateFieldPathExpression | IdentificationVariable | FunctionDeclaration | AggregateExpression | "(" Subselect ")" | ScalarExpression) (("AS")? AliasResultVariable)?
     */
    SimpleSelectExpression: $ => seq(
                                 
                                   choice(
                                 
                                     $.StateFieldPathExpression,
                                 
                                     $.IdentificationVariable,
                                 
                                     $.FunctionDeclaration,
                                 
                                     $.AggregateExpression,
                                 
                                     seq("(", $.Subselect, ")"),
                                 
                                     $.ScalarExpression
                                 
                                   ),
                                 
                                   optional(seq(optional("AS"), $.AliasResultVariable))
                                 
                                 )
                                 ,
    /*
     * dql.ebnf:99
     * PartialObjectExpression ::= "PARTIAL" IdentificationVariable "." PartialFieldSet
     */
    PartialObjectExpression: $ => seq("PARTIAL", $.IdentificationVariable, ".", $.PartialFieldSet)
                                  ,
    /*
     * dql.ebnf:100
     * PartialFieldSet ::= "{" SimpleStateField ("," SimpleStateField)* "}"
     */
    PartialFieldSet: $ => seq("{", $.SimpleStateField, repeat(seq(",", $.SimpleStateField)), "}")
                          ,
    /*
     * dql.ebnf:101
     * NewObjectExpression ::= "NEW" AbstractSchemaName "(" NewObjectArg ("," NewObjectArg)* ")"
     */
    NewObjectExpression: $ => seq(
                              
                                "NEW",
                              
                                $.AbstractSchemaName,
                              
                                "(",
                              
                                $.NewObjectArg,
                              
                                repeat(seq(",", $.NewObjectArg)),
                              
                                ")"
                              
                              )
                              ,
    /*
     * dql.ebnf:102
     * NewObjectArg ::= (ScalarExpression | "(" Subselect ")" | NewObjectExpression | EntityAsDtoArgumentExpression) ("AS" AliasResultVariable)?
     */
    NewObjectArg: $ => seq(
                       
                         choice(
                       
                           $.ScalarExpression,
                       
                           seq("(", $.Subselect, ")"),
                       
                           $.NewObjectExpression,
                       
                           $.EntityAsDtoArgumentExpression
                       
                         ),
                       
                         optional(seq("AS", $.AliasResultVariable))
                       
                       )
                       ,
    /*
     * dql.ebnf:103
     * EntityAsDtoArgumentExpression ::= IdentificationVariable
     */
    EntityAsDtoArgumentExpression: $ => $.IdentificationVariable
                                        ,
    /*
     * dql.ebnf:106
     * ConditionalExpression ::= ConditionalTerm ("OR" ConditionalTerm)*
     */
    ConditionalExpression: $ => seq($.ConditionalTerm, repeat(seq("OR", $.ConditionalTerm)))
                                ,
    /*
     * dql.ebnf:107
     * ConditionalTerm ::= ConditionalFactor ("AND" ConditionalFactor)*
     */
    ConditionalTerm: $ => seq($.ConditionalFactor, repeat(seq("AND", $.ConditionalFactor)))
                          ,
    /*
     * dql.ebnf:108
     * ConditionalFactor ::= ("NOT")? ConditionalPrimary
     */
    ConditionalFactor: $ => seq(optional("NOT"), $.ConditionalPrimary)
                            ,
    /*
     * dql.ebnf:109
     * ConditionalPrimary ::= SimpleConditionalExpression | "(" ConditionalExpression ")"
     */
    ConditionalPrimary: $ => choice($.SimpleConditionalExpression, seq("(", $.ConditionalExpression, ")"))
                             ,
    /*
     * dql.ebnf:110
     * SimpleConditionalExpression ::= ComparisonExpression | BetweenExpression | LikeExpression | InExpression | NullComparisonExpression | ExistsExpression | EmptyCollectionComparisonExpression | CollectionMemberExpression | InstanceOfExpression
     */
    SimpleConditionalExpression: $ => choice(
                                      
                                        $.ComparisonExpression,
                                      
                                        $.BetweenExpression,
                                      
                                        $.LikeExpression,
                                      
                                        $.InExpression,
                                      
                                        $.NullComparisonExpression,
                                      
                                        $.ExistsExpression,
                                      
                                        $.EmptyCollectionComparisonExpression,
                                      
                                        $.CollectionMemberExpression,
                                      
                                        $.InstanceOfExpression
                                      
                                      )
                                      ,
    /*
     * dql.ebnf:113
     * EmptyCollectionComparisonExpression ::= CollectionValuedPathExpression "IS" ("NOT")? "EMPTY"
     */
    EmptyCollectionComparisonExpression: $ => seq($.CollectionValuedPathExpression, "IS", optional("NOT"), "EMPTY")
                                              ,
    /*
     * dql.ebnf:114
     * CollectionMemberExpression ::= EntityExpression ("NOT")? "MEMBER" ("OF")? CollectionValuedPathExpression
     */
    CollectionMemberExpression: $ => seq(
                                     
                                       $.EntityExpression,
                                     
                                       optional("NOT"),
                                     
                                       "MEMBER",
                                     
                                       optional("OF"),
                                     
                                       $.CollectionValuedPathExpression
                                     
                                     )
                                     ,
    /*
     * dql.ebnf:117
     * Literal ::= string | char | integer | float | boolean
     */
    Literal: $ => choice($.string, $.char, $.integer, $.float, $.boolean)
                  ,
    /*
     * dql.ebnf:118
     * InParameter ::= ArithmeticExpression | InputParameter
     */
    InParameter: $ => choice($.ArithmeticExpression, $.InputParameter)
                      ,
    /*
     * dql.ebnf:121
     * InputParameter ::= PositionalParameter | NamedParameter
     */
    InputParameter: $ => choice($.PositionalParameter, $.NamedParameter)
                         ,
    /*
     * dql.ebnf:122
     * PositionalParameter ::= "?" integer
     */
    PositionalParameter: $ => seq("?", $.integer)
                              ,
     /*
      * dql.ebnf:123
      * NamedParameter ::= ":" identifier
      */
     NamedParameter: $ => seq(":", $.identifier)
                         ,
    /*
     * dql.ebnf:126
     * ArithmeticExpression ::= SimpleArithmeticExpression | "(" Subselect ")"
     */
    ArithmeticExpression: $ => choice($.SimpleArithmeticExpression, seq("(", $.Subselect, ")"))
                               ,
    /*
     * dql.ebnf:127
     * SimpleArithmeticExpression ::= ArithmeticTerm (("+" | "-") ArithmeticTerm)*
     */
    SimpleArithmeticExpression: $ => seq($.ArithmeticTerm, repeat(seq(choice("+", "-"), $.ArithmeticTerm)))
                                     ,
    /*
     * dql.ebnf:128
     * ArithmeticTerm ::= ArithmeticFactor (("*" | "/") ArithmeticFactor)*
     */
    ArithmeticTerm: $ => seq($.ArithmeticFactor, repeat(seq(choice("*", "/"), $.ArithmeticFactor)))
                         ,
    /*
     * dql.ebnf:129
     * ArithmeticFactor ::= (("+" | "-"))? ArithmeticPrimary
     */
    ArithmeticFactor: $ => seq(optional(choice("+", "-")), $.ArithmeticPrimary)
                           ,
    /*
     * dql.ebnf:130
     * ArithmeticPrimary ::= SingleValuedPathExpression | Literal | "(" SimpleArithmeticExpression ")" | FunctionsReturningNumerics | AggregateExpression | FunctionsReturningStrings | FunctionsReturningDateTime | IdentificationVariable | ResultVariable | InputParameter | CaseExpression
     */
    ArithmeticPrimary: $ => choice(
                            
                              $.SingleValuedPathExpression,
                            
                              $.Literal,
                            
                              seq("(", $.SimpleArithmeticExpression, ")"),
                            
                              $.FunctionsReturningNumerics,
                            
                              $.AggregateExpression,
                            
                              $.FunctionsReturningStrings,
                            
                              $.FunctionsReturningDateTime,
                            
                              $.IdentificationVariable,
                            
                              $.ResultVariable,
                            
                              $.InputParameter,
                            
                              $.CaseExpression
                            
                            )
                            ,
    /*
     * dql.ebnf:133
     * ScalarExpression ::= SimpleArithmeticExpression | StringPrimary | DateTimePrimary | StateFieldPathExpression | BooleanPrimary | CaseExpression | InstanceOfExpression
     */
    ScalarExpression: $ => choice(
                           
                             $.SimpleArithmeticExpression,
                           
                             $.StringPrimary,
                           
                             $.DateTimePrimary,
                           
                             $.StateFieldPathExpression,
                           
                             $.BooleanPrimary,
                           
                             $.CaseExpression,
                           
                             $.InstanceOfExpression
                           
                           )
                           ,
    /*
     * dql.ebnf:134
     * StringExpression ::= StringPrimary | ResultVariable | "(" Subselect ")"
     */
    StringExpression: $ => choice($.StringPrimary, $.ResultVariable, seq("(", $.Subselect, ")"))
                           ,
    /*
     * dql.ebnf:135
     * StringPrimary ::= StateFieldPathExpression | string | InputParameter | FunctionsReturningStrings | AggregateExpression | CaseExpression
     */
    StringPrimary: $ => choice(
                        
                          $.StateFieldPathExpression,
                        
                          $.string,
                        
                          $.InputParameter,
                        
                          $.FunctionsReturningStrings,
                        
                          $.AggregateExpression,
                        
                          $.CaseExpression
                        
                        )
                        ,
    /*
     * dql.ebnf:136
     * BooleanExpression ::= BooleanPrimary | "(" Subselect ")"
     */
    BooleanExpression: $ => choice($.BooleanPrimary, seq("(", $.Subselect, ")"))
                            ,
    /*
     * dql.ebnf:137
     * BooleanPrimary ::= StateFieldPathExpression | boolean | InputParameter
     */
    BooleanPrimary: $ => choice($.StateFieldPathExpression, $.boolean, $.InputParameter)
                         ,
    /*
     * dql.ebnf:138
     * EntityExpression ::= SingleValuedAssociationPathExpression | SimpleEntityExpression
     */
    EntityExpression: $ => choice($.SingleValuedAssociationPathExpression, $.SimpleEntityExpression)
                           ,
    /*
     * dql.ebnf:139
     * SimpleEntityExpression ::= IdentificationVariable | InputParameter
     */
    SimpleEntityExpression: $ => choice($.IdentificationVariable, $.InputParameter)
                                 ,
    /*
     * dql.ebnf:140
     * DatetimeExpression ::= DatetimePrimary | "(" Subselect ")"
     */
    DatetimeExpression: $ => choice($.DatetimePrimary, seq("(", $.Subselect, ")"))
                             ,
    /*
     * dql.ebnf:141
     * DatetimePrimary ::= StateFieldPathExpression | InputParameter | FunctionsReturningDateTime | AggregateExpression
     */
    DatetimePrimary: $ => choice(
                          
                            $.StateFieldPathExpression,
                          
                            $.InputParameter,
                          
                            $.FunctionsReturningDateTime,
                          
                            $.AggregateExpression
                          
                          )
                          ,
    /*
     * dql.ebnf:144
     * AggregateExpression ::= ("AVG" | "MAX" | "MIN" | "SUM" | "COUNT") "(" ("DISTINCT")? SimpleArithmeticExpression ")"
     */
    AggregateExpression: $ => seq(
                              
                                choice("AVG", "MAX", "MIN", "SUM", "COUNT"),
                              
                                "(",
                              
                                optional("DISTINCT"),
                              
                                $.SimpleArithmeticExpression,
                              
                                ")"
                              
                              )
                              ,
    /*
     * dql.ebnf:147
     * CaseExpression ::= GeneralCaseExpression | SimpleCaseExpression | CoalesceExpression | NullifExpression
     */
    CaseExpression: $ => choice(
                         
                           $.GeneralCaseExpression,
                         
                           $.SimpleCaseExpression,
                         
                           $.CoalesceExpression,
                         
                           $.NullifExpression
                         
                         )
                         ,
    /*
     * dql.ebnf:148
     * GeneralCaseExpression ::= "CASE" WhenClause WhenClause* "ELSE" ScalarExpression "END"
     */
    GeneralCaseExpression: $ => seq("CASE", $.WhenClause, repeat($.WhenClause), "ELSE", $.ScalarExpression, "END")
                                ,
    /*
     * dql.ebnf:149
     * WhenClause ::= "WHEN" ConditionalExpression "THEN" ScalarExpression
     */
    WhenClause: $ => seq("WHEN", $.ConditionalExpression, "THEN", $.ScalarExpression)
                     ,
    /*
     * dql.ebnf:150
     * SimpleCaseExpression ::= "CASE" CaseOperand SimpleWhenClause SimpleWhenClause* "ELSE" ScalarExpression "END"
     */
    SimpleCaseExpression: $ => seq(
                               
                                 "CASE",
                               
                                 $.CaseOperand,
                               
                                 $.SimpleWhenClause,
                               
                                 repeat($.SimpleWhenClause),
                               
                                 "ELSE",
                               
                                 $.ScalarExpression,
                               
                                 "END"
                               
                               )
                               ,
    /*
     * dql.ebnf:151
     * CaseOperand ::= StateFieldPathExpression | TypeDiscriminator
     */
    CaseOperand: $ => choice($.StateFieldPathExpression, $.TypeDiscriminator)
                      ,
    /*
     * dql.ebnf:152
     * SimpleWhenClause ::= "WHEN" ScalarExpression "THEN" ScalarExpression
     */
    SimpleWhenClause: $ => seq("WHEN", $.ScalarExpression, "THEN", $.ScalarExpression)
                           ,
    /*
     * dql.ebnf:153
     * CoalesceExpression ::= "COALESCE" "(" ScalarExpression ("," ScalarExpression)* ")"
     */
    CoalesceExpression: $ => seq("COALESCE", "(", $.ScalarExpression, repeat(seq(",", $.ScalarExpression)), ")")
                             ,
    /*
     * dql.ebnf:154
     * NullifExpression ::= "NULLIF" "(" ScalarExpression "," ScalarExpression ")"
     */
    NullifExpression: $ => seq("NULLIF", "(", $.ScalarExpression, ",", $.ScalarExpression, ")")
                           ,
    /*
     * dql.ebnf:157
     * QuantifiedExpression ::= ("ALL" | "ANY" | "SOME") "(" Subselect ")"
     */
    QuantifiedExpression: $ => seq(choice("ALL", "ANY", "SOME"), "(", $.Subselect, ")")
                               ,
    /*
     * dql.ebnf:158
     * BetweenExpression ::= ArithmeticExpression ("NOT")? "BETWEEN" ArithmeticExpression "AND" ArithmeticExpression
     */
    BetweenExpression: $ => seq(
                            
                              $.ArithmeticExpression,
                            
                              optional("NOT"),
                            
                              "BETWEEN",
                            
                              $.ArithmeticExpression,
                            
                              "AND",
                            
                              $.ArithmeticExpression
                            
                            )
                            ,
    /*
     * dql.ebnf:159
     * ComparisonExpression ::= ArithmeticExpression ComparisonOperator ( QuantifiedExpression | ArithmeticExpression )
     */
    ComparisonExpression: $ => seq(
                               
                                 $.ArithmeticExpression,
                               
                                 $.ComparisonOperator,
                               
                                 choice($.QuantifiedExpression, $.ArithmeticExpression)
                               
                               )
                               ,
    /*
     * dql.ebnf:160
     * InExpression ::= ArithmeticExpression ("NOT")? "IN" "(" (InParameter ("," InParameter)* | Subselect) ")"
     */
    InExpression: $ => seq(
                       
                         $.ArithmeticExpression,
                       
                         optional("NOT"),
                       
                         "IN",
                       
                         "(",
                       
                         choice(seq($.InParameter, repeat(seq(",", $.InParameter))), $.Subselect),
                       
                         ")"
                       
                       )
                       ,
    /*
     * dql.ebnf:161
     * InstanceOfExpression ::= IdentificationVariable ("NOT")? "INSTANCE" ("OF")? (InstanceOfParameter | "(" InstanceOfParameter ("," InstanceOfParameter)* ")")
     */
    InstanceOfExpression: $ => seq(
                               
                                 $.IdentificationVariable,
                               
                                 optional("NOT"),
                               
                                 "INSTANCE",
                               
                                 optional("OF"),
                               
                                 choice(
                               
                                   $.InstanceOfParameter,
                               
                                   seq("(", $.InstanceOfParameter, repeat(seq(",", $.InstanceOfParameter)), ")")
                               
                                 )
                               
                               )
                               ,
    /*
     * dql.ebnf:162
     * InstanceOfParameter ::= AbstractSchemaName | InputParameter
     */
    InstanceOfParameter: $ => choice($.AbstractSchemaName, $.InputParameter)
                              ,
    /*
     * dql.ebnf:163
     * LikeExpression ::= StringExpression ("NOT")? "LIKE" StringPrimary ("ESCAPE" char)?
     */
    LikeExpression: $ => seq(
                         
                           $.StringExpression,
                         
                           optional("NOT"),
                         
                           "LIKE",
                         
                           $.StringPrimary,
                         
                           optional(seq("ESCAPE", $.char))
                         
                         )
                         ,
    /*
     * dql.ebnf:164
     * NullComparisonExpression ::= (InputParameter | NullIfExpression | CoalesceExpression | AggregateExpression | FunctionDeclaration | IdentificationVariable | SingleValuedPathExpression | ResultVariable) "IS" ("NOT")? "NULL"
     */
    NullComparisonExpression: $ => seq(
                                   
                                     choice(
                                   
                                       $.InputParameter,
                                   
                                       $.NullIfExpression,
                                   
                                       $.CoalesceExpression,
                                   
                                       $.AggregateExpression,
                                   
                                       $.FunctionDeclaration,
                                   
                                       $.IdentificationVariable,
                                   
                                       $.SingleValuedPathExpression,
                                   
                                       $.ResultVariable
                                   
                                     ),
                                   
                                     "IS",
                                   
                                     optional("NOT"),
                                   
                                     "NULL"
                                   
                                   )
                                   ,
    /*
     * dql.ebnf:165
     * ExistsExpression ::= ("NOT")? "EXISTS" "(" Subselect ")"
     */
    ExistsExpression: $ => seq(optional("NOT"), "EXISTS", "(", $.Subselect, ")")
                           ,
    /*
     * dql.ebnf:166
     * ComparisonOperator ::= "=" | "<" | "<=" | "<>" | ">" | ">=" | "!="
     */
    ComparisonOperator: $ => choice("=", "<", "<=", "<>", ">", ">=", "!=")
                             ,
    /*
     * dql.ebnf:169
     * FunctionDeclaration ::= FunctionsReturningStrings | FunctionsReturningNumerics | FunctionsReturningDateTime
     */
    FunctionDeclaration: $ => choice(
                              
                                $.FunctionsReturningStrings,
                              
                                $.FunctionsReturningNumerics,
                              
                                $.FunctionsReturningDateTime
                              
                              )
                              ,
    /*
     * dql.ebnf:171
     * FunctionsReturningNumerics ::= "LENGTH" "(" StringPrimary ")" | "LOCATE" "(" StringPrimary "," StringPrimary ("," SimpleArithmeticExpression)?")" | "ABS" "(" SimpleArithmeticExpression ")" | "SQRT" "(" SimpleArithmeticExpression ")" | "MOD" "(" SimpleArithmeticExpression "," SimpleArithmeticExpression ")" | "SIZE" "(" CollectionValuedPathExpression ")" | "DATE_DIFF" "(" ArithmeticPrimary "," ArithmeticPrimary ")" | "BIT_AND" "(" ArithmeticPrimary "," ArithmeticPrimary ")" | "BIT_OR" "(" ArithmeticPrimary "," ArithmeticPrimary ")"
     */
    FunctionsReturningNumerics: $ => choice(
                                     
                                       seq("LENGTH", "(", $.StringPrimary, ")"),
                                     
                                       seq(
                                     
                                         "LOCATE",
                                     
                                         "(",
                                     
                                         $.StringPrimary,
                                     
                                         ",",
                                     
                                         $.StringPrimary,
                                     
                                         optional(seq(",", $.SimpleArithmeticExpression)),
                                     
                                         ")"
                                     
                                       ),
                                     
                                       seq("ABS", "(", $.SimpleArithmeticExpression, ")"),
                                     
                                       seq("SQRT", "(", $.SimpleArithmeticExpression, ")"),
                                     
                                       seq("MOD", "(", $.SimpleArithmeticExpression, ",", $.SimpleArithmeticExpression, ")"),
                                     
                                       seq("SIZE", "(", $.CollectionValuedPathExpression, ")"),
                                     
                                       seq("DATE_DIFF", "(", $.ArithmeticPrimary, ",", $.ArithmeticPrimary, ")"),
                                     
                                       seq("BIT_AND", "(", $.ArithmeticPrimary, ",", $.ArithmeticPrimary, ")"),
                                     
                                       seq("BIT_OR", "(", $.ArithmeticPrimary, ",", $.ArithmeticPrimary, ")")
                                     
                                     )
                                     ,
    /*
     * dql.ebnf:173
     * FunctionsReturningDateTime ::= "CURRENT_DATE" | "CURRENT_TIME" | "CURRENT_TIMESTAMP" | "DATE_ADD" "(" ArithmeticPrimary "," ArithmeticPrimary "," StringPrimary ")" | "DATE_SUB" "(" ArithmeticPrimary "," ArithmeticPrimary "," StringPrimary ")"
     */
    FunctionsReturningDateTime: $ => choice(
                                     
                                       "CURRENT_DATE",
                                     
                                       "CURRENT_TIME",
                                     
                                       "CURRENT_TIMESTAMP",
                                     
                                       seq(
                                     
                                         "DATE_ADD",
                                     
                                         "(",
                                     
                                         $.ArithmeticPrimary,
                                     
                                         ",",
                                     
                                         $.ArithmeticPrimary,
                                     
                                         ",",
                                     
                                         $.StringPrimary,
                                     
                                         ")"
                                     
                                       ),
                                     
                                       seq(
                                     
                                         "DATE_SUB",
                                     
                                         "(",
                                     
                                         $.ArithmeticPrimary,
                                     
                                         ",",
                                     
                                         $.ArithmeticPrimary,
                                     
                                         ",",
                                     
                                         $.StringPrimary,
                                     
                                         ")"
                                     
                                       )
                                     
                                     )
                                     ,
    /*
     * dql.ebnf:175
     * FunctionsReturningStrings ::= "CONCAT" "(" StringPrimary "," StringPrimary ")" | "SUBSTRING" "(" StringPrimary "," SimpleArithmeticExpression "," SimpleArithmeticExpression ")" | "TRIM" "(" (("LEADING" | "TRAILING" | "BOTH") char? "FROM")? StringPrimary ")" | "LOWER" "(" StringPrimary ")" | "UPPER" "(" StringPrimary ")" | "IDENTITY" "(" SingleValuedAssociationPathExpression ("," string)* ")"
     */
    FunctionsReturningStrings: $ => choice(
                                    
                                      seq("CONCAT", "(", $.StringPrimary, ",", $.StringPrimary, ")"),
                                    
                                      seq(
                                    
                                        "SUBSTRING",
                                    
                                        "(",
                                    
                                        $.StringPrimary,
                                    
                                        ",",
                                    
                                        $.SimpleArithmeticExpression,
                                    
                                        ",",
                                    
                                        $.SimpleArithmeticExpression,
                                    
                                        ")"
                                    
                                      ),
                                    
                                      seq(
                                    
                                        "TRIM",
                                    
                                        "(",
                                    
                                        optional(seq(choice("LEADING", "TRAILING", "BOTH"), optional($.char), "FROM")),
                                    
                                        $.StringPrimary,
                                    
                                        ")"
                                    
                                      ),
                                    
                                      seq("LOWER", "(", $.StringPrimary, ")"),
                                    
                                      seq("UPPER", "(", $.StringPrimary, ")"),
                                    
                                      seq(
                                    
                                        "IDENTITY",
                                    
                                        "(",
                                    
                                        $.SingleValuedAssociationPathExpression,
                                    
                                        repeat(seq(",", $.string)),
                                    
                                        ")"
                                    
                                      )
                                    
                                    )
                                    ,
    /*
     * dql.ebnf:179
     * identifier ::= /[a-zA-Z_][a-zA-Z0-9_]*∕
     */
    identifier: $ => /[a-zA-Z_][a-zA-Z0-9_]*/
                     ,
    /*
     * dql.ebnf:182
     * fully_qualified_name ::= /[a-zA-Z_\\][a-zA-Z0-9_\\]*∕
     */
    fully_qualified_name: $ => /[a-zA-Z_\\][a-zA-Z0-9_\\]*/
                               ,
    /*
     * dql.ebnf:185
     * string ::= /'([^']|'')*'/
     */
    string: $ => /'([^']|'')*'/
                 ,
    /*
     * dql.ebnf:188
     * char ::= /'[^']'/
     */
    char: $ => /'[^']'/
               ,
    /*
     * dql.ebnf:191
     * integer ::= /-?[0-9]+/
     */
    integer: $ => /-?[0-9]+/
                  ,
    /*
     * dql.ebnf:194
     * float ::= /-?[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?/
     */
    float: $ => /-?[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?/
                ,
    /*
     * dql.ebnf:197
     * boolean ::= "true" | "false"
     */
    boolean: $ => choice("true", "false")
                  ,
    /*
     * dql.ebnf:200
     * TypeDiscriminator ::= IdentificationVariable
     */
    TypeDiscriminator: $ => $.IdentificationVariable
                            ,
    /*
     * dql.ebnf:201
     * NullIfExpression ::= NullifExpression
     */
    NullIfExpression: $ => $.NullifExpression
                           ,
    /*
     * dql.ebnf:202
     * DateTimePrimary ::= DatetimePrimary
     */
    DateTimePrimary: $ => $.DatetimePrimary
                          
  }
});

